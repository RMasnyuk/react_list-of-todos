{"version":3,"sources":["components/User.js","components/TodoItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["User","props","react_default","a","createElement","name","TodoItem","item","components_User","className","complete","TodoList","newList","list","map","element","user","users","find","id","userId","components_TodoItem","key","title","completed","onClick","sort","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","todoList","loaded","isLoading","disabled","handleClick","bind","assertThisInitialized","sortTable","loadData","url","fetch","then","res","json","_this2","setState","Promise","all","_ref","_ref2","slicedToArray","todos","b","localeCompare","components_TodoList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ede4bda9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction User(props) {\r\n  return (\r\n    <td>{props.name}</td>\r\n  )\r\n}\r\n\r\nexport default User;\r\n","import React from 'react';\r\nimport User from \"./User\";\r\n\r\nfunction TodoItem(props) {\r\n  return (\r\n    <tr>\r\n      <td>{props.item}</td>\r\n      <User name={props.name}/>\r\n      <td className={props.complete === 'completed' ? \"completed\" : \"notcompleted\"}>{props.complete}</td>\r\n    </tr>\r\n  );\r\n}\r\n\r\nexport default TodoItem;\r\n","import React from 'react';\r\nimport TodoItem from \"./TodoItem\";\r\n\r\nfunction TodoList(props) {\r\n  let newList = props.list.map(element => {\r\n    let user = props.users.find(user => {\r\n      return user.id === element.userId;\r\n    });\r\n    return (\r\n      <TodoItem key={element.id} item={element.title} name={user.name}\r\n                complete={element.completed ? 'completed' : 'not completed'}/>\r\n    )\r\n  });\r\n\r\n  return (\r\n    <table>\r\n      <tbody>\r\n      <tr>\r\n        <td onClick={props.sort}>Title(click to sort)</td>\r\n        <td>User</td>\r\n        <td>Status</td>\r\n      </tr>\r\n      {newList}\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\nexport default TodoList;\r\n","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport TodoList from \"./components/TodoList\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      todoList: [],\r\n      users: [],\r\n      loaded: false,\r\n      isLoading: false,\r\n      disabled: false\r\n    };\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.sortTable = this.sortTable.bind(this);\r\n    this.loadData = this.loadData.bind(this);\r\n  }\r\n\r\n  loadData(url) {\r\n    return fetch(url)\r\n      .then(res => res.json())\r\n  }\r\n\r\n  handleClick() {\r\n    this.setState({\r\n      isLoading: true,\r\n      disabled: true\r\n    });\r\n\r\n    Promise.all([\r\n      this.loadData('https://jsonplaceholder.typicode.com/todos'),\r\n      this.loadData('https://jsonplaceholder.typicode.com/users'),\r\n    ])\r\n      .then(([todos, users]) => this.setState({\r\n          loaded: true,\r\n          todoList: todos,\r\n          users: users\r\n        })\r\n      )\r\n  }\r\n\r\n  sortTable() {\r\n    this.setState({\r\n      todoList: this.state.todoList.sort((a, b) => a.title.localeCompare(b.title))\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        {this.state.loaded\r\n          ? <TodoList list={this.state.todoList} users={this.state.users} sort={this.sortTable}/>\r\n          : (\r\n            <div className=\"container\">\r\n              <button onClick={this.handleClick} disabled={this.state.disabled}>Load</button>\r\n              {this.state.isLoading ? <div id='load'>Loading...</div> : null}\r\n            </div>\r\n          )\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}